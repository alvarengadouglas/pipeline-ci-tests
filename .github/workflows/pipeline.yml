name: Pipeline CI for Tests

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  rest-assured:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout API Tests
        uses: actions/checkout@v4
        with:
          repository: alvarengadouglas/api-automation-rest-assured

      - name: Set up JDK 11 for x64
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          architecture: x64

      - name: Running tests
        run: mvn clean test --file pom.xml

      - name: Upload test results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rest-assured-test-results
          path: ./target/Reports/*.html


  selenium-build:
    needs: rest-assured
    runs-on: ubuntu-latest

    steps:
    - name: Checkout E2E Tests
      uses: actions/checkout@v4
      with:
        repository: alvarengadouglas/web-automation-selenium
        
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name:  Install Google Chrome
      run: |
        chmod +x ./chrome-install.sh
        ./chrome-install.sh

    - name: Build with Maven a Selenium test application
      run: mvn clean test --file pom.xml

    - name: Upload Extent Report HTML
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: extent-report
        path: target/Reports


  appium-build:
    needs: selenium-build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Mobile Tests
      uses: actions/checkout@v4
      with:
        repository: alvarengadouglas/mobile-automation-appium-java

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Build with Maven a Appium test application
      run: mvn clean test --file pom.xml
    
  k6-test:
    needs: appium-build
    runs-on: ubuntu-latest

    steps:
      - name: Install Docker
        run: |
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh ./get-docker.sh --dry-run
          sudo systemctl start docker
          sudo systemctl enable docker
          docker --version
        
      - name: Checkout Performance Tests
        uses: actions/checkout@v4
        with:
          repository: alvarengadouglas/performance-automation-grafana-k6

      - name: Run k6 performance tests
        run: |
          docker run -i --name k6-tests grafana/k6 run --vus 500 --duration 300s - <script.js

      - name: Extract test results from container
        run: |
          docker cp k6-tests:/home/k6/summary.html ./                            
      
      - name: Upload test results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: k6-test-results
          path: ./summary.html